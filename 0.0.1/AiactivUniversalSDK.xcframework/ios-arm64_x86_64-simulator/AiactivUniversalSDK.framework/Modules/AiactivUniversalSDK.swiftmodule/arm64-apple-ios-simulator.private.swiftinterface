// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AiactivUniversalSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Darwin.C
import Darwin
import Foundation
import GoogleInteractiveMediaAds
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import os.log
import os
@_inheritsConvenienceInitializers @objc public class AiactivSDK : ObjectiveC.NSObject {
  public static func start()
  @objc override dynamic public init()
  @objc deinit
}
extension AiactivUniversalSDK.AiactivSDK {
  public static func track(name: Swift.String, properties: [Swift.String : Any]? = nil)
  public static func track<P>(name: Swift.String, properties: P? = nil) where P : Swift.Decodable, P : Swift.Encodable
  public static func identify(userId: Swift.String, traits: [Swift.String : Any]?)
  public static func identify<T>(userId: Swift.String, traits: T) where T : Swift.Decodable, T : Swift.Encodable
  public static func identify<T>(traits: T? = nil) where T : Swift.Decodable, T : Swift.Encodable
  public static func identify(userId: Swift.String)
  public static func screen(title: Swift.String, category: Swift.String? = nil)
  public static func screen<P>(title: Swift.String, category: Swift.String? = nil, properties: P?) where P : Swift.Decodable, P : Swift.Encodable
  public static func group(groupId: Swift.String)
  public static func group(groupId: Swift.String, traits: [Swift.String : Any]?)
  public static func group<T>(groupId: Swift.String, traits: T?) where T : Swift.Decodable, T : Swift.Encodable
  public static func alias(newId: Swift.String)
  public static func adNetworkContainer() -> AiactivUniversalSDK.Container?
}
public struct NativeAdRequest : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Segment : Swift.Codable {
  public var id: Swift.String?
  public var name: Swift.String?
  public var ext: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Format : Swift.Codable {
  public let width: Swift.Int
  public let height: Swift.Int
  public var widthRatio: Swift.Int?
  public var heightRatio: Swift.Int?
  public var widthMin: Swift.Int?
  public var ext: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DemandSidePlatform : Swift.Decodable {
  public let id: Swift.Int64
  public let name: Swift.String?
  public let credential: AiactivUniversalSDK.DemandSidePlatform.Credential?
  public let domain: Swift.String?
  public let status: Swift.String?
  public let priority: Swift.Int?
  public var url: Swift.String?
  public var directDeal: Swift.Int?
  public var headerBidding: Swift.Int?
  public struct Credential : Swift.Decodable {
    public let apiKey: Swift.String?
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct Native : Swift.Codable {
  public let request: Swift.String
  public var version: Swift.String
  public var apis: [AiactivUniversalSDK.ApiFramework]?
  public var blockedAttributes: [AiactivUniversalSDK.CreativeAttribute]?
  public var ext: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum CompanionType : Swift.Int, Swift.Codable {
  case `static`
  case html
  case iframe
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Metric : Swift.Codable {
  public let id: Swift.String
  public var value: Swift.Float
  public var vendor: Swift.String?
  public var ext: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Ad : Swift.Decodable {
  public let id: Swift.String
  public let bid: AiactivUniversalSDK.BidResponse?
  public init(from decoder: Swift.Decoder) throws
}
public enum AdPosition : Swift.Int, Swift.Codable {
  case unknown
  case aboveTheFold
  case visibleInitially
  case belowTheFold
  case header
  case footer
  case sidebar
  case fullscreen
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Asset : Swift.Codable {
  public struct Request : Swift.Encodable {
    public init()
    public var id: Swift.Int?
    public var required: Swift.Int
    public var title: AiactivUniversalSDK.AssetTitle.Request?
    public var image: AiactivUniversalSDK.AssetImage.Request?
    public var video: AiactivUniversalSDK.AssetVideo.Request?
    public var data: AiactivUniversalSDK.AssetData.Request?
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Response : Swift.Decodable {
    public let id: Swift.Int?
    public let required: Swift.Int?
    public let title: AiactivUniversalSDK.AssetTitle.Response?
    public let image: AiactivUniversalSDK.AssetImage.Response?
    public let video: AiactivUniversalSDK.AssetVideo.Response?
    public let data: AiactivUniversalSDK.AssetData.Response?
    public let link: AiactivUniversalSDK.Link?
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol Subscriber : AnyObject {
}
@_hasMissingDesignatedInitializers public class Analytics {
  public static var sharedInstance: AiactivUniversalSDK.Analytics {
    get
  }
  public var timeline: AiactivUniversalSDK.Timeline
  public func process(event: AiactivUniversalSDK.RawEvent)
  @objc deinit
}
extension AiactivUniversalSDK.Analytics {
  public func settings() -> AiactivUniversalSDK.Settings?
  public func manuallyEnableDestination(plugin: AiactivUniversalSDK.DestinationPlugin)
  public var enabled: Swift.Bool {
    get
    set(value)
  }
}
public class Configuration {
  public init(writeKey: Swift.String)
  @objc deinit
}
public enum AnalyticsError : Swift.Error {
  case storageUnableToCreate(Swift.String)
  case storageUnableToWrite(Swift.String)
  case storageUnableToRename(Swift.String)
  case storageUnableToOpen(Swift.String)
  case storageInvalid(Swift.String)
  case storageUnknown(Swift.Error)
  case networkUnexpectedHTTPCode(Swift.Int)
  case networkServerLimited(Swift.Int)
  case networkServerRejected(Swift.Int)
  case networkUnknown(Swift.Error)
  case networkInvalidData
  case jsonUnableToSerialize(Swift.Error)
  case jsonUnableToDeserialize(Swift.Error)
  case jsonUnknown(Swift.Error)
  case pluginError(Swift.Error)
}
extension AiactivUniversalSDK.Analytics {
  public func reportInternalError(_ error: Swift.Error, fatal: Swift.Bool = false)
  public static func reportInternalError(_ error: Swift.Error, fatal: Swift.Bool = false)
}
extension AiactivUniversalSDK.Analytics {
  public func track<P>(name: Swift.String, properties: P?) where P : Swift.Decodable, P : Swift.Encodable
  public func identify<T>(userId: Swift.String, traits: T?) where T : Swift.Decodable, T : Swift.Encodable
  public func identify<T>(traits: T) where T : Swift.Decodable, T : Swift.Encodable
  public func identify(userId: Swift.String)
  public func screen<P>(title: Swift.String, category: Swift.String? = nil, properties: P?) where P : Swift.Decodable, P : Swift.Encodable
  public func screen(title: Swift.String, category: Swift.String? = nil)
  public func group<T>(groupId: Swift.String, traits: T?) where T : Swift.Decodable, T : Swift.Encodable
  public func group(groupId: Swift.String)
  public func alias(newId: Swift.String)
}
extension AiactivUniversalSDK.Analytics {
  public func track(name: Swift.String, properties: [Swift.String : Any]? = nil)
  public func identify(userId: Swift.String, traits: [Swift.String : Any]? = nil)
  public func screen(title: Swift.String, category: Swift.String? = nil, properties: [Swift.String : Any]? = nil)
  public func group(groupId: Swift.String, traits: [Swift.String : Any]?)
}
public struct SeatBid : Swift.Codable {
  public let bids: [AiactivUniversalSDK.Bid]
  public let seat: Swift.String?
  public let group: Swift.Int?
  public let ext: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum PluginType : Swift.Int, Swift.CaseIterable {
  case before
  case enrichment
  case destination
  case after
  case utility
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [AiactivUniversalSDK.PluginType]
  public typealias RawValue = Swift.Int
  public static var allCases: [AiactivUniversalSDK.PluginType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum UpdateType {
  case initial
  case refresh
  public static func == (a: AiactivUniversalSDK.UpdateType, b: AiactivUniversalSDK.UpdateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Plugin : AnyObject {
  var type: AiactivUniversalSDK.PluginType { get }
  var analytics: AiactivUniversalSDK.Analytics? { get set }
  func configure(analytics: AiactivUniversalSDK.Analytics)
  func update(settings: AiactivUniversalSDK.Settings, type: AiactivUniversalSDK.UpdateType)
  func execute<T>(event: T?) -> T? where T : AiactivUniversalSDK.RawEvent
  func shutdown()
}
public protocol EventPlugin : AiactivUniversalSDK.Plugin {
  func identify(event: AiactivUniversalSDK.IdentifyEvent) -> AiactivUniversalSDK.IdentifyEvent?
  func track(event: AiactivUniversalSDK.TrackEvent) -> AiactivUniversalSDK.TrackEvent?
  func group(event: AiactivUniversalSDK.GroupEvent) -> AiactivUniversalSDK.GroupEvent?
  func alias(event: AiactivUniversalSDK.AliasEvent) -> AiactivUniversalSDK.AliasEvent?
  func screen(event: AiactivUniversalSDK.ScreenEvent) -> AiactivUniversalSDK.ScreenEvent?
  func reset()
  func flush()
}
public protocol DestinationPlugin : AiactivUniversalSDK.EventPlugin {
  var key: Swift.String { get }
  var timeline: AiactivUniversalSDK.Timeline { get }
  func add(plugin: AiactivUniversalSDK.Plugin) -> AiactivUniversalSDK.Plugin
  func apply(closure: (AiactivUniversalSDK.Plugin) -> Swift.Void)
  func remove(plugin: AiactivUniversalSDK.Plugin)
}
public protocol UtilityPlugin : AiactivUniversalSDK.EventPlugin {
}
public protocol VersionedPlugin {
  static func version() -> Swift.String
}
extension AiactivUniversalSDK.Plugin {
  public func configure(analytics: AiactivUniversalSDK.Analytics)
}
extension AiactivUniversalSDK.DestinationPlugin {
  public func configure(analytics: AiactivUniversalSDK.Analytics)
  public func apply(closure: (AiactivUniversalSDK.Plugin) -> Swift.Void)
  @discardableResult
  public func add(plugin: AiactivUniversalSDK.Plugin) -> AiactivUniversalSDK.Plugin
  public func remove(plugin: AiactivUniversalSDK.Plugin)
}
extension AiactivUniversalSDK.Analytics {
  public func apply(closure: (AiactivUniversalSDK.Plugin) -> Swift.Void)
  @discardableResult
  public func add(plugin: AiactivUniversalSDK.Plugin) -> AiactivUniversalSDK.Plugin
  public func remove(plugin: AiactivUniversalSDK.Plugin)
  public func find<T>(pluginType: T.Type) -> T? where T : AiactivUniversalSDK.Plugin
  public func find(key: Swift.String) -> AiactivUniversalSDK.DestinationPlugin?
}
public enum ExpandableDirection : Swift.Int, Swift.Codable {
  case left
  case right
  case up
  case down
  case fullscreen
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias ACIMAAdsManager = GoogleInteractiveMediaAds.IMAAdsManager
public typealias ACIMAAdEvent = GoogleInteractiveMediaAds.IMAAdEvent
public typealias ACIMAAdError = GoogleInteractiveMediaAds.IMAAdError
public typealias ACIMAAdEventType = GoogleInteractiveMediaAds.IMAAdEventType
public typealias ACIMAAdsLoader = GoogleInteractiveMediaAds.IMAAdsLoader
public typealias ACIMAAdsLoadedData = GoogleInteractiveMediaAds.IMAAdsLoadedData
public typealias ACIMAAdLoadingErrorData = GoogleInteractiveMediaAds.IMAAdLoadingErrorData
public typealias ACIMAAVPlayerContentPlayhead = GoogleInteractiveMediaAds.IMAAVPlayerContentPlayhead
public protocol IMAPlayerViewDelegate : ObjectiveC.NSObject {
  func imaPlayerView(_ adsManager: AiactivUniversalSDK.ACIMAAdsManager, didReceive event: AiactivUniversalSDK.ACIMAAdEvent)
  func imaPlayerView(_ adsManager: AiactivUniversalSDK.ACIMAAdsManager, didReceive error: AiactivUniversalSDK.ACIMAAdError)
  func imaPlayerViewDidRequestContentPause(_ adsManager: AiactivUniversalSDK.ACIMAAdsManager)
  func imaPlayerViewDidRequestContentResume(_ adsManager: AiactivUniversalSDK.ACIMAAdsManager)
  func imaPlayerView(_ loader: AiactivUniversalSDK.ACIMAAdsLoader, adsLoadedWith adsLoadedData: AiactivUniversalSDK.ACIMAAdsLoadedData)
  func imaPlayerView(_ loader: AiactivUniversalSDK.ACIMAAdsLoader, failedWith adErrorData: AiactivUniversalSDK.ACIMAAdLoadingErrorData)
  func imaPlayerView(_ unitID: Swift.Int64, didFailLoad error: AiactivUniversalSDK.AiactivSDKError)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class IMAPlayerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var contentPlayer: AVFoundation.AVPlayer!
  @_Concurrency.MainActor(unsafe) public var delegate: AiactivUniversalSDK.IMAPlayerViewDelegate?
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func setup(contentUrl: Swift.String)
  @_Concurrency.MainActor(unsafe) public func requestAds(adUnitID: Swift.Int64, adSize: AiactivUniversalSDK.AdSize? = nil)
  @_Concurrency.MainActor(unsafe) public func release()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension AiactivUniversalSDK.IMAPlayerView : AiactivUniversalSDK.VideoAdLoaderDelegate {
  @_Concurrency.MainActor(unsafe) public func videoAdLoader(_ unitID: Swift.Int64, didFailLoad error: AiactivUniversalSDK.AiactivSDKError)
  @_Concurrency.MainActor(unsafe) public func videoAdLoader(_ unitID: Swift.Int64, vastTagURL url: Swift.String)
}
extension AiactivUniversalSDK.IMAPlayerView : GoogleInteractiveMediaAds.IMAAdsManagerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager, didReceive event: GoogleInteractiveMediaAds.IMAAdEvent)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager, didReceive error: GoogleInteractiveMediaAds.IMAAdError)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adsManagerDidRequestContentPause(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adsManagerDidRequestContentResume(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager)
}
extension AiactivUniversalSDK.IMAPlayerView : GoogleInteractiveMediaAds.IMAAdsLoaderDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader, adsLoadedWith adsLoadedData: GoogleInteractiveMediaAds.IMAAdsLoadedData)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader, failedWith adErrorData: GoogleInteractiveMediaAds.IMAAdLoadingErrorData)
}
public struct Settings : Swift.Codable {
  public var integrations: AiactivUniversalSDK.JSON?
  public var plan: AiactivUniversalSDK.JSON?
  public var edgeFunction: AiactivUniversalSDK.JSON?
  public var middlewareSettings: AiactivUniversalSDK.JSON?
  public init(writeKey: Swift.String, apiHost: Swift.String)
  public init(writeKey: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func integrationSettings(forKey key: Swift.String) -> [Swift.String : Any]?
  public func integrationSettings<T>(forKey key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func integrationSettings<T>(forPlugin plugin: AiactivUniversalSDK.DestinationPlugin) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func hasIntegrationSettings(forPlugin plugin: AiactivUniversalSDK.DestinationPlugin) -> Swift.Bool
  public func hasIntegrationSettings(key: Swift.String) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
extension AiactivUniversalSDK.Settings : Swift.Equatable {
  public static func == (lhs: AiactivUniversalSDK.Settings, rhs: AiactivUniversalSDK.Settings) -> Swift.Bool
}
public struct Video : Swift.Codable {
  public let mimes: [Swift.String]
  public var minDuration: Swift.Int?
  public var maxDuration: Swift.Int?
  public var protocols: [AiactivUniversalSDK.VideoProtocol]?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public var startDelay: Swift.Int?
  public var placement: AiactivUniversalSDK.Video.Placement?
  public var linearity: Swift.Int?
  public var skip: Swift.Int?
  public var skipMin: Swift.Int?
  public var skipAfter: Swift.Int?
  public var sequence: Swift.Int?
  public var blockedAttributes: [AiactivUniversalSDK.CreativeAttribute]?
  public var maxExtended: Swift.Int?
  public var minBitrate: Swift.Int?
  public var maxBitrate: Swift.Int?
  public var boxingAllowed: Swift.Int?
  public var playbackMethod: [AiactivUniversalSDK.PlaybackMethod]?
  public var playbackEnd: Swift.Int?
  public var deliveryMethod: [AiactivUniversalSDK.DeliveryMethod]?
  public var position: AiactivUniversalSDK.AdPosition?
  public var companionAds: [AiactivUniversalSDK.Banner]?
  public var apis: [AiactivUniversalSDK.ApiFramework]?
  public var companionTypes: [AiactivUniversalSDK.CompanionType]?
  public enum Linearity : Swift.Int, Swift.Codable {
    case inStream
    case overlay
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Placement : Swift.Int, Swift.Codable {
    case inStream
    case inBanner
    case inArticle
    case inFeed
    case floating
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension AiactivUniversalSDK.Analytics : AiactivUniversalSDK.Subscriber {
}
public struct AssetVideo {
  public struct Request : Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Response : Swift.Decodable {
    public let vastTag: Swift.String
    public init(from decoder: Swift.Decoder) throws
  }
}
public struct InitContainerRequest : AiactivUniversalSDK.Request {
  public var authentication: AiactivUniversalSDK.AuthenticationMethod
  public init(writeKey: Swift.String)
  public var method: AiactivUniversalSDK.HTTPMethod
  public var baseURL: Foundation.URL {
    get
  }
  public var path: Swift.String {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
  public typealias Response = AiactivUniversalSDK.Container
}
public struct Banner : Swift.Codable {
  public var id: Swift.String?
  public var formats: [AiactivUniversalSDK.Format]?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public var blockedTypes: AiactivUniversalSDK.Banner.BannerType?
  public var blockedAttributes: [AiactivUniversalSDK.CreativeAttribute]?
  public var position: AiactivUniversalSDK.AdPosition?
  public var mines: [Swift.String]?
  public var topFrame: Swift.Int?
  public var expandableDirection: [AiactivUniversalSDK.ExpandableDirection]?
  public var apis: [AiactivUniversalSDK.ApiFramework]?
  public var videoCompanion: AiactivUniversalSDK.VideoCompanion?
  public var ext: Swift.String?
  public enum BannerType : Swift.Int, Swift.Codable {
    case xhtmlTextAd
    case xhtmlBannerAd
    case javascriptAd
    case iframe
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PrivateMarketplace : Swift.Codable {
  public var privateAuction: Swift.Int
  public var deals: [AiactivUniversalSDK.Deal]?
  public var ext: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum MediaRating : Swift.Int, Swift.Codable {
  case all
  case over12
  case mature
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct BidResponse : Swift.Codable {
  public let id: Swift.String
  public let seatBids: [AiactivUniversalSDK.SeatBid]?
  public let bidID: Swift.String?
  public let currency: Swift.String?
  public let customData: Swift.String?
  public let noBidReasonCode: AiactivUniversalSDK.NoBidReasonCode?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum NoBidReasonCode : Swift.Int, Swift.Codable {
  case unknown
  case technical
  case invalid
  case knowWebSpider
  case suspectedNoHumanTraffic
  case cloudDataCenterProxy
  case unsupportedDevice
  case blockedPublisher
  case unmatchedUser
  case dailyReaderCapMet
  case dailyDomainCapMet
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Link : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public class Timeline {
  public init()
  @objc deinit
}
extension AiactivUniversalSDK.Plugin {
  public func execute<T>(event: T?) -> T? where T : AiactivUniversalSDK.RawEvent
  public func update(settings: AiactivUniversalSDK.Settings, type: AiactivUniversalSDK.UpdateType)
  public func shutdown()
}
extension AiactivUniversalSDK.EventPlugin {
  public func execute<T>(event: T?) -> T? where T : AiactivUniversalSDK.RawEvent
  public func identify(event: AiactivUniversalSDK.IdentifyEvent) -> AiactivUniversalSDK.IdentifyEvent?
  public func track(event: AiactivUniversalSDK.TrackEvent) -> AiactivUniversalSDK.TrackEvent?
  public func screen(event: AiactivUniversalSDK.ScreenEvent) -> AiactivUniversalSDK.ScreenEvent?
  public func group(event: AiactivUniversalSDK.GroupEvent) -> AiactivUniversalSDK.GroupEvent?
  public func alias(event: AiactivUniversalSDK.AliasEvent) -> AiactivUniversalSDK.AliasEvent?
  public func flush()
  public func reset()
}
extension AiactivUniversalSDK.DestinationPlugin {
  public func execute<T>(event: T?) -> T? where T : AiactivUniversalSDK.RawEvent
}
public struct DestinationMetadata : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol RawEvent : Swift.Decodable, Swift.Encodable {
  var type: Swift.String? { get set }
  var anonymousId: Swift.String? { get set }
  var messageId: Swift.String? { get set }
  var userId: Swift.String? { get set }
  var timestamp: Swift.String? { get set }
  var context: AiactivUniversalSDK.JSON? { get set }
  var integrations: AiactivUniversalSDK.JSON? { get set }
  var metrics: [AiactivUniversalSDK.JSON]? { get set }
  var _metadata: AiactivUniversalSDK.DestinationMetadata? { get set }
}
public struct TrackEvent : AiactivUniversalSDK.RawEvent {
  public var type: Swift.String?
  public var anonymousId: Swift.String?
  public var messageId: Swift.String?
  public var userId: Swift.String?
  public var timestamp: Swift.String?
  public var context: AiactivUniversalSDK.JSON?
  public var integrations: AiactivUniversalSDK.JSON?
  public var metrics: [AiactivUniversalSDK.JSON]?
  public var _metadata: AiactivUniversalSDK.DestinationMetadata?
  public var event: Swift.String
  public var properties: AiactivUniversalSDK.JSON?
  public init(event: Swift.String, properties: AiactivUniversalSDK.JSON?)
  public init(existing: AiactivUniversalSDK.TrackEvent)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IdentifyEvent : AiactivUniversalSDK.RawEvent {
  public var type: Swift.String?
  public var anonymousId: Swift.String?
  public var messageId: Swift.String?
  public var userId: Swift.String?
  public var timestamp: Swift.String?
  public var context: AiactivUniversalSDK.JSON?
  public var integrations: AiactivUniversalSDK.JSON?
  public var metrics: [AiactivUniversalSDK.JSON]?
  public var _metadata: AiactivUniversalSDK.DestinationMetadata?
  public var traits: AiactivUniversalSDK.JSON?
  public init(userId: Swift.String? = nil, traits: AiactivUniversalSDK.JSON? = nil)
  public init(existing: AiactivUniversalSDK.IdentifyEvent)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ScreenEvent : AiactivUniversalSDK.RawEvent {
  public var type: Swift.String?
  public var anonymousId: Swift.String?
  public var messageId: Swift.String?
  public var userId: Swift.String?
  public var timestamp: Swift.String?
  public var context: AiactivUniversalSDK.JSON?
  public var integrations: AiactivUniversalSDK.JSON?
  public var metrics: [AiactivUniversalSDK.JSON]?
  public var _metadata: AiactivUniversalSDK.DestinationMetadata?
  public var name: Swift.String?
  public var category: Swift.String?
  public var properties: AiactivUniversalSDK.JSON?
  public init(title: Swift.String? = nil, category: Swift.String?, properties: AiactivUniversalSDK.JSON? = nil)
  public init(existing: AiactivUniversalSDK.ScreenEvent)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct GroupEvent : AiactivUniversalSDK.RawEvent {
  public var type: Swift.String?
  public var anonymousId: Swift.String?
  public var messageId: Swift.String?
  public var userId: Swift.String?
  public var timestamp: Swift.String?
  public var context: AiactivUniversalSDK.JSON?
  public var integrations: AiactivUniversalSDK.JSON?
  public var metrics: [AiactivUniversalSDK.JSON]?
  public var _metadata: AiactivUniversalSDK.DestinationMetadata?
  public var groupId: Swift.String?
  public var traits: AiactivUniversalSDK.JSON?
  public init(groupId: Swift.String? = nil, traits: AiactivUniversalSDK.JSON? = nil)
  public init(existing: AiactivUniversalSDK.GroupEvent)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AliasEvent : AiactivUniversalSDK.RawEvent {
  public var type: Swift.String?
  public var anonymousId: Swift.String?
  public var messageId: Swift.String?
  public var timestamp: Swift.String?
  public var context: AiactivUniversalSDK.JSON?
  public var integrations: AiactivUniversalSDK.JSON?
  public var metrics: [AiactivUniversalSDK.JSON]?
  public var _metadata: AiactivUniversalSDK.DestinationMetadata?
  public var userId: Swift.String?
  public var previousId: Swift.String?
  public init(newId: Swift.String? = nil)
  public init(existing: AiactivUniversalSDK.AliasEvent)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol AdLoaderDelegate : AnyObject {
  func adLoader(_ unitID: Swift.Int64, didSuccessLoad nativeAd: AiactivUniversalSDK.NativeAdResponse)
  func adLoader(_ unitID: Swift.Int64, didFailLoad error: AiactivUniversalSDK.AiactivSDKError)
}
open class AdLoader {
  public var delegate: AiactivUniversalSDK.AdLoaderDelegate?
  public init(adUnitID: Swift.Int64)
  public func loadNativeAd(_ adRequest: AiactivUniversalSDK.AdRequest, withAssets assets: Swift.Array<AiactivUniversalSDK.Asset.Request>)
  @objc deinit
}
public enum AiactivSDKError : Swift.Error {
  public enum GeneralErrorReason {
    case processDiscarded
    case coreError(string: Swift.String)
    case conversionError(string: Swift.String, encoding: Swift.String.Encoding)
  }
  public enum RequestErrorReason {
    case missingURL
    case lackOfAccessToken
    case jsonEncodingFailed(Swift.Error)
    case invalidParameter
  }
  public enum ResponseErrorReason {
    public struct APIErrorDetail {
      public let code: Swift.Int
      public let error: AiactivUniversalSDK.APIError?
      public let raw: Foundation.HTTPURLResponse
      public let rawString: Swift.String?
    }
    case URLSessionError(Swift.Error)
    case nonHTTPURLResponse
    case dataParsingFailed(Any.Type, Foundation.Data, Swift.Error?)
    case invalidHTTPStatusAPIError(detail: AiactivUniversalSDK.AiactivSDKError.ResponseErrorReason.APIErrorDetail)
  }
  case generalError(reason: AiactivUniversalSDK.AiactivSDKError.GeneralErrorReason)
  case requestFailed(reason: AiactivUniversalSDK.AiactivSDKError.RequestErrorReason)
  case responseFailed(reason: AiactivUniversalSDK.AiactivSDKError.ResponseErrorReason)
  case untypedError(error: Swift.Error)
}
extension AiactivUniversalSDK.AiactivSDKError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct APIError {
  public let error: Swift.String
  public let detail: Swift.String?
}
public struct AdRequest {
  public init(context: [Swift.String : Swift.String])
  public init()
}
public struct AssetImage : Swift.Codable {
  public struct Request : Swift.Encodable {
    public init()
    public var type: AiactivUniversalSDK.AssetImage.ImageType?
    public var width: Swift.Int?
    public var minWidth: Swift.Int?
    public var height: Swift.Int?
    public var minHeight: Swift.Int?
    public var mimes: Swift.Array<Swift.String>?
    public var ext: Swift.String?
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Response : Swift.Decodable {
    public let url: Swift.String
    public init(from decoder: Swift.Decoder) throws
  }
  public enum ImageType : Swift.Int, Swift.Encodable {
    case icon
    case main
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol Request {
  associatedtype Response : Swift.Decodable
  var method: AiactivUniversalSDK.HTTPMethod { get }
  var baseURL: Foundation.URL { get }
  var path: Swift.String { get }
  var pathQueries: [Foundation.URLQueryItem]? { get }
  var parameters: AiactivUniversalSDK.Parameters? { get }
  var authentication: AiactivUniversalSDK.AuthenticationMethod { get }
  var contentType: AiactivUniversalSDK.ContentType { get }
  var adapters: [AiactivUniversalSDK.RequestAdapter] { get }
  var suffixAdapters: [AiactivUniversalSDK.RequestAdapter]? { get }
  var pipelines: [AiactivUniversalSDK.ResponsePipeline] { get }
  var prefixPipelines: [AiactivUniversalSDK.ResponsePipeline]? { get }
  var dataParser: AiactivUniversalSDK.ResponsePipelineTerminator { get }
  var timeout: Foundation.TimeInterval { get }
  var cachePolicy: Foundation.NSURLRequest.CachePolicy { get }
}
public typealias Parameters = [Swift.String : Any]
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AuthenticationMethod {
  case none
  case token(Swift.String)
}
public enum ContentType {
  case none
  case formUrlEncoded
  case json
  public static func == (a: AiactivUniversalSDK.ContentType, b: AiactivUniversalSDK.ContentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AiactivUniversalSDK.Request {
  public var baseURL: Foundation.URL {
    get
  }
  public var cachePolicy: Foundation.NSURLRequest.CachePolicy {
    get
  }
  public var adapters: [AiactivUniversalSDK.RequestAdapter] {
    get
  }
  public var pipelines: [AiactivUniversalSDK.ResponsePipeline] {
    get
  }
  public var pathQueries: [Foundation.URLQueryItem]? {
    get
  }
  public var suffixAdapters: [AiactivUniversalSDK.RequestAdapter]? {
    get
  }
  public var prefixPipelines: [AiactivUniversalSDK.ResponsePipeline]? {
    get
  }
  public var dataParser: AiactivUniversalSDK.ResponsePipelineTerminator {
    get
  }
  public var contentType: AiactivUniversalSDK.ContentType {
    get
  }
  public var parameters: AiactivUniversalSDK.Parameters? {
    get
  }
  public var timeout: Foundation.TimeInterval {
    get
  }
}
public struct AssetTitle : Swift.Codable {
  public struct Request : Swift.Encodable {
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Response : Swift.Decodable {
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Device : Swift.Codable {
  public let userAgent: Swift.String?
  public var geo: AiactivUniversalSDK.Geo?
  public var doNotTrack: Swift.Int?
  public var limitAdTracking: Swift.Int
  public var ip: Swift.String?
  public var ipV6: Swift.String?
  public var deviceType: AiactivUniversalSDK.Device.DeviceType
  public let make: Swift.String
  public let model: Swift.String
  public let osName: Swift.String
  public let osVersion: Swift.String
  public let hardwareVersion: Swift.String
  public let height: CoreFoundation.CGFloat
  public let width: CoreFoundation.CGFloat
  public let ppi: CoreFoundation.CGFloat
  public let pixelRatio: CoreFoundation.CGFloat
  public let supportJS: Swift.Int
  public var geoFetch: Swift.Int?
  public var flashVersion: Swift.String?
  public var language: Swift.String?
  public var carrier: Swift.String?
  public var mccMNC: Swift.String?
  public var connectionType: AiactivUniversalSDK.Device.ConnectionType?
  public var idForAdvertiser: Swift.String
  public var deviceIDSHA1: Swift.String?
  public var deviceIDMD5: Swift.String?
  public var devicePlatformSHA1: Swift.String?
  public var devicePlatformMD5: Swift.String?
  public var macAddressSHA1: Swift.String?
  public var macAddressMD5: Swift.String?
  public var ext: Swift.String?
  public enum DeviceType : Swift.Int, Swift.Codable {
    case mobileOrTablet
    case personalComputer
    case connectedTV
    case phone
    case tablet
    case connectedDevice
    case setTopBox
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ConnectionType : Swift.Int, Swift.Codable {
    case unknown
    case ethernet
    case wifi
    case cellularNetworkUnknownGeneration
    case cellular2G
    case cellular3G
    case cellular4G
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NativeAdResponse : Swift.Decodable {
  public let assets: Swift.Array<AiactivUniversalSDK.Asset.Response>?
  public let assetsUrl: Swift.String?
  public let dcoUrl: Swift.String?
  public let eventTrackers: Swift.Array<AiactivUniversalSDK.EventTracker>?
  public init(from decoder: Swift.Decoder) throws
}
public protocol RequestAdapter {
  func adapted(_ request: Foundation.URLRequest) throws -> Foundation.URLRequest
}
public struct AnyRequestAdapter : AiactivUniversalSDK.RequestAdapter {
  public init(_ block: @escaping (Foundation.URLRequest) throws -> Foundation.URLRequest)
  public func adapted(_ request: Foundation.URLRequest) throws -> Foundation.URLRequest
}
public protocol ResponsePipelineTerminator : AnyObject {
  func parse<T>(request: T, data: Foundation.Data) throws -> T.Response where T : AiactivUniversalSDK.Request
}
public protocol ResponsePipelineRedirector : AnyObject {
  func shouldApply<T>(request: T, data: Foundation.Data, response: Foundation.HTTPURLResponse) -> Swift.Bool where T : AiactivUniversalSDK.Request
  func redirect<T>(request: T, data: Foundation.Data, response: Foundation.HTTPURLResponse, done closure: @escaping (AiactivUniversalSDK.ResponsePipelineRedirectorAction) throws -> Swift.Void) throws where T : AiactivUniversalSDK.Request
}
public enum ResponsePipelineRedirectorAction {
  case restart
  case restartWithout(AiactivUniversalSDK.ResponsePipeline)
  case stop(Swift.Error)
  case `continue`
  case continueWith(Foundation.Data, Foundation.HTTPURLResponse)
}
public enum ResponsePipeline {
  case terminator(AiactivUniversalSDK.ResponsePipelineTerminator)
  case redirector(AiactivUniversalSDK.ResponsePipelineRedirector)
}
extension AiactivUniversalSDK.ResponsePipeline : Swift.Equatable {
  public static func == (lhs: AiactivUniversalSDK.ResponsePipeline, rhs: AiactivUniversalSDK.ResponsePipeline) -> Swift.Bool
}
public class JSONParsePipeline : AiactivUniversalSDK.ResponsePipelineTerminator {
  final public let parser: Foundation.JSONDecoder
  public init(_ parser: Foundation.JSONDecoder)
  public func parse<T>(request: T, data: Foundation.Data) throws -> T.Response where T : AiactivUniversalSDK.Request
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringParsePipeline : AiactivUniversalSDK.ResponsePipelineTerminator {
  public func parse<T>(request: T, data: Foundation.Data) throws -> T.Response where T : AiactivUniversalSDK.Request
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RefreshTokenRedirector : AiactivUniversalSDK.ResponsePipelineRedirector {
  public func shouldApply<T>(request: T, data: Foundation.Data, response: Foundation.HTTPURLResponse) -> Swift.Bool where T : AiactivUniversalSDK.Request
  public func redirect<T>(request: T, data: Foundation.Data, response: Foundation.HTTPURLResponse, done closure: @escaping (AiactivUniversalSDK.ResponsePipelineRedirectorAction) throws -> Swift.Void) throws where T : AiactivUniversalSDK.Request
  @objc deinit
}
public struct Inventory : Swift.Decodable {
  public let id: Swift.Int64
  public let cpm: Swift.Int?
  public let defaultAds: AiactivUniversalSDK.BidResponse?
  public let trackerTemplate: AiactivUniversalSDK.TrackerTemplate?
  public let platforms: [AiactivUniversalSDK.DemandSidePlatform]?
  public let format: Swift.String?
  public let merge: Swift.String?
  public let metadata: AiactivUniversalSDK.Metadata
  public let name: Swift.String?
  public let status: Swift.String?
  public let type: Swift.String?
  public let floorPrice: Swift.Float?
  public let positionID: Swift.Int?
  public let clickRate: Swift.Int?
  public let fillRate: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
}
public struct TrackerTemplate : Swift.Decodable {
  public let id: Swift.String
  public let clickImage: Swift.String
  public let clickUrl: Swift.String
  public let code: Swift.String
  public let name: Swift.String
  public let price: Swift.Int
  public let type: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct Metadata : Swift.Decodable {
  public let backgroundColor: Swift.String
  public let ext: Swift.String?
  public let loop: Swift.Int?
  public let skip: Swift.Int?
  public let passBack: Swift.String?
  public let width: Swift.Int
  public let height: Swift.Int
  public let mines: [Swift.String]?
  public let linearity: Swift.Int?
  public let skipMin: Swift.Int?
  public let skipAfter: Swift.Int?
  public let startDelay: Swift.Int?
  public let minBitrate: Swift.Int?
  public let maxBitrate: Swift.Int?
  public let minDuration: Swift.Int?
  public let maxDuration: Swift.Int?
  public let protocols: [AiactivUniversalSDK.VideoProtocol]?
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Session {
  public static var sharedInstance: AiactivUniversalSDK.Session {
    get
  }
  @discardableResult
  public func send<T>(_ request: T, callbackQueue: AiactivUniversalSDK.CallbackQueue = .currentMainOrAsync, completionHandler completion: ((Swift.Result<T.Response, AiactivUniversalSDK.AiactivSDKError>) -> Swift.Void)? = nil) -> AiactivUniversalSDK.SessionTask? where T : AiactivUniversalSDK.Request
  @discardableResult
  public func upload<T>(_ request: T, callbackQueue: AiactivUniversalSDK.CallbackQueue = .currentMainOrAsync, fromFile: Foundation.URL, completionHandler completion: ((Swift.Result<T.Response, AiactivUniversalSDK.AiactivSDKError>) -> Swift.Void)? = nil) -> AiactivUniversalSDK.SessionTask? where T : AiactivUniversalSDK.Request
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SessionTask {
  @objc deinit
}
public struct PreBid : Swift.Codable {
  public var targeting: AiactivUniversalSDK.Target?
  public var storeRequest: AiactivUniversalSDK.StoreRequest?
  public var cache: AiactivUniversalSDK.Cache?
  public var meta: AiactivUniversalSDK.Meta?
  public var bidID: Swift.String?
  public var type: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct StoreRequest : Swift.Codable {
  public let id: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Cache : Swift.Codable {
  public let key: Swift.String?
  public let url: Swift.String?
  public let bids: AiactivUniversalSDK.BidCacheInfo?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BidCacheInfo : Swift.Codable {
  public let url: Swift.String?
  public let cacheId: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Meta : Swift.Codable {
  public let advertiserId: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Container : Swift.Decodable {
  public let id: Swift.Int64
  public let core: AiactivUniversalSDK.Core
  public let inventories: [AiactivUniversalSDK.Inventory]
  public let platforms: [AiactivUniversalSDK.DemandSidePlatform]?
  public let name: Swift.String?
  public let status: Swift.String?
  public let url: Swift.String?
  public let isFirstParty: Swift.Bool?
  public let capping: AiactivUniversalSDK.Capping
  public var configurationID: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct Core : Swift.Decodable {
  public let url: Swift.String
  public let name: Swift.String
  public let domain: Swift.String
  public let type: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public protocol Action {
  associatedtype StateType : AiactivUniversalSDK.State
  func reduce(state: Self.StateType) -> Self.StateType
}
public protocol AsyncAction {
  associatedtype StateType : AiactivUniversalSDK.State
  associatedtype ResultType
  func operation(state: Self.StateType, completion: @escaping (Self.ResultType?) -> Swift.Void)
  func reduce(state: Self.StateType, operationResult: Self.ResultType?) -> Self.StateType
}
public enum BatchType : Swift.String, Swift.Encodable {
  case bidRequest
  case bidResponse
  case bidError
  case bidWinner
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BatchEventType : Swift.String, Swift.Encodable {
  case track
  case event
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class BatchController {
  public static let shared: AiactivUniversalSDK.BatchController
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AiactivDestination : AiactivUniversalSDK.DestinationPlugin, AiactivUniversalSDK.Subscriber {
  final public let type: AiactivUniversalSDK.PluginType
  final public let key: Swift.String
  final public let timeline: AiactivUniversalSDK.Timeline
  weak public var analytics: AiactivUniversalSDK.Analytics? {
    get
    set
  }
  public func update(settings: AiactivUniversalSDK.Settings, type: AiactivUniversalSDK.UpdateType)
  public func execute<T>(event: T?) -> T? where T : AiactivUniversalSDK.RawEvent
  public func flush()
  @objc deinit
}
extension AiactivUniversalSDK.AiactivDestination : AiactivUniversalSDK.VersionedPlugin {
  public static func version() -> Swift.String
}
@_hasMissingDesignatedInitializers public class Context {
  final public let type: AiactivUniversalSDK.PluginType
  weak public var analytics: AiactivUniversalSDK.Analytics?
  public func execute<T>(event: T?) -> T? where T : AiactivUniversalSDK.RawEvent
  @objc deinit
}
public struct Audio : Swift.Codable {
  public let mines: [Swift.String]
  public var minDuration: Swift.Int?
  public var maxDuration: Swift.Int?
  public var protocols: [AiactivUniversalSDK.VideoProtocol]
  public var startDelay: AiactivUniversalSDK.VideoStartDelay?
  public var sequence: Swift.Int?
  public var blockedAttributes: [AiactivUniversalSDK.CreativeAttribute]?
  public var maxExtended: Swift.Int?
  public var minBitrate: Swift.Int?
  public var maxBitrate: Swift.Int?
  public var deliveryMethod: [AiactivUniversalSDK.DeliveryMethod]?
  public var companionAds: [AiactivUniversalSDK.Banner]?
  public var apis: [AiactivUniversalSDK.ApiFramework]?
  public var companionTypes: [AiactivUniversalSDK.CompanionType]?
  public var maxSequence: Swift.Int?
  public var feed: AiactivUniversalSDK.Audio.FeedType?
  public var stitched: Swift.Int?
  public var volumeMode: AiactivUniversalSDK.Audio.VolumeMode?
  public var ext: Swift.String?
  public enum FeedType : Swift.Int, Swift.Codable {
    case musicService
    case broadcast
    case podcast
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum VolumeMode : Swift.Int, Swift.Codable {
    case none
    case average
    case peak
    case loudness
    case custom
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension AiactivUniversalSDK.LogTarget {
  public func flush()
}
public enum AdSize : Swift.String {
  case banner
  case fullBanner
  case largeBanner
  case rectangle
  case mediumRectangle
  case video
  public struct Frame {
    public let width: CoreFoundation.CGFloat
    public let height: CoreFoundation.CGFloat
  }
  public var frame: AiactivUniversalSDK.AdSize.Frame {
    get
  }
  public var ratio: CoreFoundation.CGFloat {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Capping : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Regs : Swift.Codable {
  public var coppa: Swift.Int?
  public var ext: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol LogTarget {
  func parseLog(_ log: AiactivUniversalSDK.LogMessage)
  func flush()
}
public struct LoggingType : Swift.Hashable {
  public enum LogDestination {
    case log
    case metric
    case history
    public static func == (a: AiactivUniversalSDK.LoggingType.LogDestination, b: AiactivUniversalSDK.LoggingType.LogDestination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(types: [AiactivUniversalSDK.LoggingType.LogDestination])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AiactivUniversalSDK.LoggingType, b: AiactivUniversalSDK.LoggingType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum LogFilterKind : Swift.Int {
  case error
  case warning
  case debug
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol LogMessage {
  var kind: AiactivUniversalSDK.LogFilterKind { get }
  var title: Swift.String? { get }
  var message: Swift.String { get }
  var event: AiactivUniversalSDK.RawEvent? { get }
  var function: Swift.String? { get }
  var line: Swift.Int? { get }
  var logType: AiactivUniversalSDK.LoggingType.LogDestination { get }
  var dateTime: Foundation.Date { get }
}
public enum MetricType : Swift.Int {
  case counter
  case gauge
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension AiactivUniversalSDK.Analytics {
  public func log(message: Swift.String, kind: AiactivUniversalSDK.LogFilterKind? = nil, function: Swift.String = #function, line: Swift.Int = #line)
  public func metric(_ type: AiactivUniversalSDK.MetricType, name: Swift.String, value: Swift.Double, tags: [Swift.String]? = nil)
  public func history(event: AiactivUniversalSDK.RawEvent, sender: Swift.AnyObject, function: Swift.String = #function, line: Swift.Int = #line)
}
extension AiactivUniversalSDK.Analytics {
  public func add(target: AiactivUniversalSDK.LogTarget, type: AiactivUniversalSDK.LoggingType)
  public func logFlush()
}
public enum ApiFramework : Swift.Int, Swift.Codable {
  case vpaid1
  case vpaid2
  case mraid1
  case ormma
  case mraid2
  case mraid3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class DeviceToken {
  final public let type: AiactivUniversalSDK.PluginType
  weak public var analytics: AiactivUniversalSDK.Analytics?
  public var token: Swift.String?
  required public init()
  public func execute<T>(event: T?) -> T? where T : AiactivUniversalSDK.RawEvent
  @objc deinit
}
extension AiactivUniversalSDK.Analytics {
  public func setDeviceToken(_ token: Swift.String)
}
public struct Target : Swift.Codable {
  public let pb: Swift.String?
  public let deal: Swift.String?
  public let env: Swift.String?
  public let cacheId: Swift.String?
  public let bidder: Swift.String?
  public let bidderAicactus: Swift.String?
  public let dealAicactus: Swift.String?
  public let envAicactus: Swift.String?
  public let uuidAicactus: Swift.String?
  public let cachePath: Swift.String?
  public let cacheHost: Swift.String?
  public let cachePathAicactus: Swift.String?
  public let pbAicactus: Swift.String?
  public let cacheIdAicactus: Swift.String?
  public let uuid: Swift.String?
  public let cacheHostAicactus: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class StartupQueue : AiactivUniversalSDK.Plugin, AiactivUniversalSDK.Subscriber {
  @AiactivUniversalSDK.Atomic public var running: Swift.Bool {
    get
    set
    _modify
  }
  final public let type: AiactivUniversalSDK.PluginType
  weak public var analytics: AiactivUniversalSDK.Analytics? {
    get
    set
  }
  public func execute<T>(event: T?) -> T? where T : AiactivUniversalSDK.RawEvent
  @objc deinit
}
public struct EventTracker : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PassBackRequest : AiactivUniversalSDK.Request {
  public var authentication: AiactivUniversalSDK.AuthenticationMethod
  public init(url: Swift.String)
  public var baseURL: Foundation.URL {
    get
  }
  public var path: Swift.String {
    get
  }
  public var method: AiactivUniversalSDK.HTTPMethod
  public var parameters: [Swift.String : Any]? {
    get
  }
  public var contentType: AiactivUniversalSDK.ContentType
  public typealias Response = Swift.String
  public var dataParser: AiactivUniversalSDK.ResponsePipelineTerminator
}
public protocol VideoAdLoaderDelegate : AnyObject {
  func videoAdLoader(_ unitID: Swift.Int64, vastTagURL url: Swift.String)
  func videoAdLoader(_ unitID: Swift.Int64, didFailLoad error: AiactivUniversalSDK.AiactivSDKError)
}
open class VideoAdLoader {
  public var delegate: AiactivUniversalSDK.VideoAdLoaderDelegate?
  public init(adUnitID: Swift.Int64, adSize: AiactivUniversalSDK.AdSize?)
  public func loadAd(_ adRequest: AiactivUniversalSDK.AdRequest)
  @objc deinit
}
public enum VideoProtocol : Swift.Int, Swift.Codable {
  case vast1
  case vast2
  case vast3
  case vast1Wrapper
  case vast2Wrapper
  case vast3Wrapper
  case vast4
  case vast4Wrapper
  case daast1
  case daast1Wrapper
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct BidRequest : Swift.Codable {
  public let id: Swift.String
  public var impression: [AiactivUniversalSDK.Impression]
  public var app: AiactivUniversalSDK.ApplicationInfo
  public var device: AiactivUniversalSDK.Device
  public var user: AiactivUniversalSDK.User
  public var test: Swift.Int?
  public var auctionType: Swift.Int?
  public var maximumTime: Swift.Int?
  public var whiteListSeatIDs: [Swift.String]?
  public var blockedListSeatIDs: [Swift.String]?
  public var allImpressions: Swift.Int?
  public var currencies: [Swift.String]?
  public var whiteListLanguages: [Swift.String]?
  public var blockedCategories: [Swift.String]?
  public var blockedAdvertiserDomains: [Swift.String]?
  public var blockedApps: [Swift.String]?
  public var source: AiactivUniversalSDK.Source
  public var regs: AiactivUniversalSDK.Regs?
  public var ext: AiactivUniversalSDK.BidRequest.Extension?
  public struct Extension : Swift.Codable {
    public let context: [Swift.String : Swift.String]?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AdType : Swift.String {
  case banner
  case video
  case native
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol iOSLifecycle {
  func applicationDidEnterBackground(application: UIKit.UIApplication?)
  func applicationWillEnterForeground(application: UIKit.UIApplication?)
  func application(_ application: UIKit.UIApplication?, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  func applicationDidBecomeActive(application: UIKit.UIApplication?)
  func applicationWillResignActive(application: UIKit.UIApplication?)
  func applicationDidReceiveMemoryWarning(application: UIKit.UIApplication?)
  func applicationWillTerminate(application: UIKit.UIApplication?)
  func applicationSignificantTimeChange(application: UIKit.UIApplication?)
  func applicationBackgroundRefreshDidChange(application: UIKit.UIApplication?, refreshStatus: UIKit.UIBackgroundRefreshStatus)
}
extension AiactivUniversalSDK.iOSLifecycle {
  public func applicationDidEnterBackground(application: UIKit.UIApplication?)
  public func applicationWillEnterForeground(application: UIKit.UIApplication?)
  public func application(_ application: UIKit.UIApplication?, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public func applicationDidBecomeActive(application: UIKit.UIApplication?)
  public func applicationWillResignActive(application: UIKit.UIApplication?)
  public func applicationDidReceiveMemoryWarning(application: UIKit.UIApplication?)
  public func applicationWillTerminate(application: UIKit.UIApplication?)
  public func applicationSignificantTimeChange(application: UIKit.UIApplication?)
  public func applicationBackgroundRefreshDidChange(application: UIKit.UIApplication?, refreshStatus: UIKit.UIBackgroundRefreshStatus)
}
extension AiactivUniversalSDK.AiactivDestination : AiactivUniversalSDK.iOSLifecycle {
  public func applicationWillEnterForeground(application: UIKit.UIApplication?)
  public func applicationDidEnterBackground(application: UIKit.UIApplication?)
}
public struct Publisher : Swift.Codable {
  public let id: Swift.String?
  public let name: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PostBidRequest : AiactivUniversalSDK.Request {
  public var authentication: AiactivUniversalSDK.AuthenticationMethod
  public init(url: Swift.String, request: AiactivUniversalSDK.BidRequest)
  public var baseURL: Foundation.URL {
    get
  }
  public var path: Swift.String {
    get
  }
  public var method: AiactivUniversalSDK.HTTPMethod
  public var parameters: [Swift.String : Any]? {
    get
  }
  public var contentType: AiactivUniversalSDK.ContentType
  public typealias Response = AiactivUniversalSDK.BidResponse
}
@propertyWrapper public struct Atomic<T> {
  public init(wrappedValue value: T)
  public var wrappedValue: T {
    get
    set
  }
}
public enum CallbackQueue {
  case asyncMain
  case currentMainOrAsync
  case untouch
  case dispatch(Dispatch.DispatchQueue)
  case operation(Foundation.OperationQueue)
}
public struct Constant {
  public static let SDKVersion: Swift.String
  public static let APIHost: Swift.String
  public static let BatchEndpoint: Swift.String
  public static let APIBaseURL: Swift.String
}
public typealias SubscriptionID = Swift.Int
public class Store {
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public init()
  @discardableResult
  public func subscribe<T>(_ subscriber: AiactivUniversalSDK.Subscriber, initialState: Swift.Bool = false, queue: Dispatch.DispatchQueue = .main, handler: @escaping AiactivUniversalSDK.Handler<T>) -> AiactivUniversalSDK.SubscriptionID where T : AiactivUniversalSDK.State
  public func unsubscribe(identifier: AiactivUniversalSDK.SubscriptionID)
  public func provide<T>(state: T) where T : AiactivUniversalSDK.State
  public func dispatch<T>(action: T) where T : AiactivUniversalSDK.Action
  public func dispatch<T>(action: T) where T : AiactivUniversalSDK.AsyncAction
  public func currentState<T>() -> T? where T : AiactivUniversalSDK.State
  @objc deinit
}
public protocol AdViewDelegate : AnyObject {
  func adView(_ adView: AiactivUniversalSDK.AdView, didFailLoad error: AiactivUniversalSDK.AiactivSDKError)
  func adView(_ adView: AiactivUniversalSDK.AdView)
  func adView(_ adView: AiactivUniversalSDK.AdView, didClickAd url: Foundation.URL)
}
extension AiactivUniversalSDK.AdViewDelegate {
  public func adView(_ adView: AiactivUniversalSDK.AdView, didClickAd url: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class AdView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var delegate: AiactivUniversalSDK.AdViewDelegate?
  @_Concurrency.MainActor(unsafe) public var adSize: AiactivUniversalSDK.AdSize?
  @_Concurrency.MainActor(unsafe) public var adType: AiactivUniversalSDK.AdType?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var unitID: Foundation.NSNumber?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var size: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) open func loadAd(_ adRequest: AiactivUniversalSDK.AdRequest)
  @objc deinit
}
extension AiactivUniversalSDK.AdView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
extension AiactivUniversalSDK.AdView : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
public struct Geo : Swift.Codable {
  public var latitude: Swift.Float
  public var longitude: Swift.Float
  public var type: AiactivUniversalSDK.Geo.GeoType
  public var accuracy: Swift.Int?
  public var lastFix: Swift.Int?
  public var ipService: AiactivUniversalSDK.Geo.IPLocationService?
  public var country: Swift.String?
  public var region: Swift.String?
  public var regionFIPS104: Swift.String?
  public var metro: Swift.String?
  public var city: Swift.String?
  public var zip: Swift.String?
  public var localTime: Swift.Int?
  public var ext: Swift.String?
  public enum GeoType : Swift.Int, Swift.Codable {
    case gps
    case ipAddress
    case userProvided
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum IPLocationService : Swift.Int {
    case ip2Location
    case neuStart
    case maxMind
    case netAcuity
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Source : Swift.Codable {
  public let transactionID: Swift.String
  public var finalDecision: Swift.Int?
  public var paymentChainID: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum DeliveryMethod : Swift.Int, Swift.Codable {
  case streaming
  case progressive
  case download
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum JSON : Swift.Equatable {
  case null
  case bool(Swift.Bool)
  case number(Foundation.Decimal)
  case string(Swift.String)
  case array([AiactivUniversalSDK.JSON])
  case object([Swift.String : AiactivUniversalSDK.JSON])
  public init(_ object: [Swift.String : Any]) throws
  public init<T>(with value: T) throws where T : Swift.Decodable, T : Swift.Encodable
  public init(_ value: Any) throws
  public static func == (a: AiactivUniversalSDK.JSON, b: AiactivUniversalSDK.JSON) -> Swift.Bool
}
extension AiactivUniversalSDK.JSON : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Swift.Encodable {
  public func prettyPrint() -> Swift.String
  public func toString() -> Swift.String
  public func toString(pretty: Swift.Bool) -> Swift.String
}
extension AiactivUniversalSDK.JSON {
  public func codableValue<T>() -> T? where T : Swift.Decodable, T : Swift.Encodable
  public var boolValue: Swift.Bool? {
    get
  }
  public var decimalValue: Foundation.Decimal? {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public var uintValue: Swift.UInt? {
    get
  }
  public var floatValue: Swift.Float? {
    get
  }
  public var doubleValue: Swift.Double? {
    get
  }
  public var stringValue: Swift.String? {
    get
  }
  public var arrayValue: [Any]? {
    get
  }
  public var dictionaryValue: [Swift.String : Any]? {
    get
  }
}
extension AiactivUniversalSDK.JSON {
  public func mapTransform(_ keys: [Swift.String : Swift.String], valueTransform: ((_ key: Swift.String, _ value: Any) -> Any)? = nil) throws -> AiactivUniversalSDK.JSON
  public func add(value: Any) throws -> AiactivUniversalSDK.JSON?
  public func add(value: Any, forKey key: Swift.String) throws -> AiactivUniversalSDK.JSON?
  public func remove(key: Swift.String) throws -> AiactivUniversalSDK.JSON?
  public subscript(index: Swift.Int) -> AiactivUniversalSDK.JSON? {
    get
  }
  public subscript(key: Swift.String) -> AiactivUniversalSDK.JSON? {
    get
  }
  public subscript<T>(keyPath keyPath: AiactivUniversalSDK.KeyPath) -> T? where T : Swift.Decodable, T : Swift.Encodable {
    get
    set(newValue)
  }
  public func value<T>(forKeyPath keyPath: AiactivUniversalSDK.KeyPath) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public mutating func setValue<T>(_ value: T?, forKeyPath keyPath: AiactivUniversalSDK.KeyPath) where T : Swift.Decodable, T : Swift.Encodable
}
extension Swift.Dictionary where Key == Swift.String, Value == Any {
  public func mapTransform(_ keys: [Swift.String : Swift.String], valueTransform: ((_ key: Key, _ value: Value) -> Any)? = nil) throws -> [Key : Value]
}
public struct Bid : Swift.Codable {
  public let id: Swift.String
  public let impressionID: Swift.String
  public let price: Swift.Float
  public let winURL: Swift.String?
  public let billURL: Swift.String?
  public let lossURL: Swift.String?
  public var adMarkup: Swift.String?
  public let preloadedAdID: Swift.String?
  public let advertiserDomains: [Swift.String]?
  public let bundle: Swift.String?
  public let imageURL: Swift.String?
  public let campaignID: Swift.String?
  public let creativeID: Swift.String?
  public let tacticID: Swift.String?
  public let categories: [Swift.String]?
  public let attributes: [AiactivUniversalSDK.CreativeAttribute]?
  public let api: AiactivUniversalSDK.ApiFramework?
  public let videoProtocol: AiactivUniversalSDK.VideoProtocol?
  public let mediaRating: AiactivUniversalSDK.MediaRating?
  public let language: Swift.String?
  public let dealID: Swift.String?
  public let width: Swift.Int?
  public let height: Swift.Int?
  public let widthRatio: Swift.Int?
  public let heightRatio: Swift.Int?
  public let expired: Swift.Int?
  public let ext: AiactivUniversalSDK.Extension?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Extension : Swift.Codable {
  public let preBid: AiactivUniversalSDK.PreBid?
  public let context: [Swift.String : Swift.String]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum CreativeAttribute : Swift.Int, Swift.Codable {
  case audioADAutoPlay
  case audioADUserInitiated
  case expandableAutomatic
  case expandableUserClicked
  case expandaableUserRollOver
  case videoADInBannerAutoPlay
  case videoADInBannerUserInitiated
  case pop
  case provocativeOrSuggestiveImagery
  case animation
  case surveys
  case textOnly
  case userInteractive
  case alertStyle
  case hasAudioOnOffButton
  case provideSkipButton
  case adobeFlash
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct User : Swift.Codable {
  public var id: Swift.String?
  public var buyerUID: Swift.String?
  public var yearOfBirth: Swift.Int?
  public var gender: AiactivUniversalSDK.User.Gender
  public var keywords: Swift.String?
  public var customData: Swift.String?
  public var geo: AiactivUniversalSDK.Geo?
  public var ext: Swift.String?
  public struct Data : Swift.Codable {
    public var id: Swift.String?
    public var name: Swift.String?
    public var segment: [AiactivUniversalSDK.Segment]?
    public var ext: Swift.String?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public enum Gender : Swift.String, Swift.Codable {
    case male
    case female
    case other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Deal : Swift.Codable {
  public let id: Swift.String
  public var bidFloor: Swift.Int
  public var bidFloorCurrency: Swift.String
  public var at: Swift.Int?
  public var whiteListSeatIDs: [Swift.String]?
  public var advertiserDomains: [Swift.String]?
  public var ext: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BasicHandler {
}
public struct KeyPath {
  public init(_ string: Swift.String)
}
extension AiactivUniversalSDK.KeyPath : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension Swift.Dictionary where Key : Swift.StringProtocol {
  public subscript(keyPath keyPath: AiactivUniversalSDK.KeyPath) -> Any? {
    get
    set
  }
  public subscript(keyPath keyPath: AiactivUniversalSDK.KeyPath, reference reference: Any?) -> Any? {
    get
    set
  }
  public func exists(keyPath: AiactivUniversalSDK.KeyPath, reference: Any? = nil) -> Swift.Bool
}
public struct ApplicationInfo : Swift.Codable {
  public var id: Swift.String?
  public let name: Swift.String?
  public let bundle: Swift.String?
  public var domain: Swift.String?
  public var storeURL: Swift.String?
  public let version: Swift.String?
  public var publisher: AiactivUniversalSDK.Publisher?
  public let ext: AiactivUniversalSDK.ApplicationInfo.Extension?
  public init()
  public struct Extension : Swift.Codable {
    public let aicactus: AiactivUniversalSDK.Aicactus
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Aicactus : Swift.Codable {
  public let version: Swift.String
  public let source: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AdNetwork {
  public static var sharedInstance: AiactivUniversalSDK.AdNetwork {
    get
  }
  @objc deinit
}
public enum PlaybackMethod : Swift.Int, Swift.Codable {
  case pageLoadSoundOn
  case pageLoadSoundOff
  case onClickSoundOn
  case mouseOverSoundOn
  case enterViewportSoundOn
  case enterViewportSoundOff
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Impression : Swift.Codable {
  public let id: Swift.String
  public var metric: [AiactivUniversalSDK.Metric]?
  public var banner: AiactivUniversalSDK.Banner?
  public var video: AiactivUniversalSDK.Video?
  public var audio: AiactivUniversalSDK.Audio?
  public var native: AiactivUniversalSDK.Native?
  public var pmp: AiactivUniversalSDK.PrivateMarketplace?
  public var displayManager: Swift.String?
  public var displayManagerVersion: Swift.String?
  public var interstitial: Swift.Int?
  public var tagId: Swift.String?
  public var bidFloor: Swift.Int?
  public var bidFloorCurrency: Swift.String?
  public var clickBrowser: Swift.Int?
  public var secure: Swift.Int
  public var iframeBuster: [Swift.String]?
  public var expire: Swift.Int?
  public var ext: AiactivUniversalSDK.Impression.Extension?
  public struct Extension : Swift.Codable {
    public var preBid: AiactivUniversalSDK.PreBid?
    public struct AiCactusAd : Swift.Codable {
      public var headerBids: [Swift.String]?
      public var containerID: Swift.Int64?
      public var inventoryID: Swift.Int64?
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AssetData {
  public struct Request : Swift.Encodable {
    public init()
    public var type: Swift.Int?
    public var length: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Response : Swift.Decodable {
    public let value: Swift.String
    public var type: Swift.Int?
    public var length: Swift.Int?
    public init(from decoder: Swift.Decoder) throws
  }
}
public protocol State {
}
public typealias Handler<T> = (T) -> Swift.Void where T : AiactivUniversalSDK.State
public enum VideoStartDelay : Swift.Int, Swift.Codable {
  case preRoll
  case genericMidRoll
  case genericPostRoll
  case midRoll
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VideoCompanion : Swift.Int, Swift.Codable {
  case concurrent
  case endCard
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension AiactivUniversalSDK.CompanionType : Swift.Equatable {}
extension AiactivUniversalSDK.CompanionType : Swift.Hashable {}
extension AiactivUniversalSDK.CompanionType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.AdPosition : Swift.Equatable {}
extension AiactivUniversalSDK.AdPosition : Swift.Hashable {}
extension AiactivUniversalSDK.AdPosition : Swift.RawRepresentable {}
extension AiactivUniversalSDK.PluginType : Swift.Equatable {}
extension AiactivUniversalSDK.PluginType : Swift.Hashable {}
extension AiactivUniversalSDK.PluginType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.UpdateType : Swift.Equatable {}
extension AiactivUniversalSDK.UpdateType : Swift.Hashable {}
extension AiactivUniversalSDK.ExpandableDirection : Swift.Equatable {}
extension AiactivUniversalSDK.ExpandableDirection : Swift.Hashable {}
extension AiactivUniversalSDK.ExpandableDirection : Swift.RawRepresentable {}
extension AiactivUniversalSDK.Video.Linearity : Swift.Equatable {}
extension AiactivUniversalSDK.Video.Linearity : Swift.Hashable {}
extension AiactivUniversalSDK.Video.Linearity : Swift.RawRepresentable {}
extension AiactivUniversalSDK.Video.Placement : Swift.Equatable {}
extension AiactivUniversalSDK.Video.Placement : Swift.Hashable {}
extension AiactivUniversalSDK.Video.Placement : Swift.RawRepresentable {}
extension AiactivUniversalSDK.Banner.BannerType : Swift.Equatable {}
extension AiactivUniversalSDK.Banner.BannerType : Swift.Hashable {}
extension AiactivUniversalSDK.Banner.BannerType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.MediaRating : Swift.Equatable {}
extension AiactivUniversalSDK.MediaRating : Swift.Hashable {}
extension AiactivUniversalSDK.MediaRating : Swift.RawRepresentable {}
extension AiactivUniversalSDK.NoBidReasonCode : Swift.Equatable {}
extension AiactivUniversalSDK.NoBidReasonCode : Swift.Hashable {}
extension AiactivUniversalSDK.NoBidReasonCode : Swift.RawRepresentable {}
extension AiactivUniversalSDK.AssetImage.ImageType : Swift.Equatable {}
extension AiactivUniversalSDK.AssetImage.ImageType : Swift.Hashable {}
extension AiactivUniversalSDK.AssetImage.ImageType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.HTTPMethod : Swift.Equatable {}
extension AiactivUniversalSDK.HTTPMethod : Swift.Hashable {}
extension AiactivUniversalSDK.HTTPMethod : Swift.RawRepresentable {}
extension AiactivUniversalSDK.ContentType : Swift.Equatable {}
extension AiactivUniversalSDK.ContentType : Swift.Hashable {}
extension AiactivUniversalSDK.Device.DeviceType : Swift.Equatable {}
extension AiactivUniversalSDK.Device.DeviceType : Swift.Hashable {}
extension AiactivUniversalSDK.Device.DeviceType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.Device.ConnectionType : Swift.Equatable {}
extension AiactivUniversalSDK.Device.ConnectionType : Swift.Hashable {}
extension AiactivUniversalSDK.Device.ConnectionType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.BatchType : Swift.Equatable {}
extension AiactivUniversalSDK.BatchType : Swift.Hashable {}
extension AiactivUniversalSDK.BatchType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.BatchEventType : Swift.Equatable {}
extension AiactivUniversalSDK.BatchEventType : Swift.Hashable {}
extension AiactivUniversalSDK.BatchEventType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.Context : AiactivUniversalSDK.Plugin {}
extension AiactivUniversalSDK.Audio.FeedType : Swift.Equatable {}
extension AiactivUniversalSDK.Audio.FeedType : Swift.Hashable {}
extension AiactivUniversalSDK.Audio.FeedType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.Audio.VolumeMode : Swift.Equatable {}
extension AiactivUniversalSDK.Audio.VolumeMode : Swift.Hashable {}
extension AiactivUniversalSDK.Audio.VolumeMode : Swift.RawRepresentable {}
extension AiactivUniversalSDK.AdSize : Swift.Equatable {}
extension AiactivUniversalSDK.AdSize : Swift.Hashable {}
extension AiactivUniversalSDK.AdSize : Swift.RawRepresentable {}
extension AiactivUniversalSDK.LoggingType.LogDestination : Swift.Equatable {}
extension AiactivUniversalSDK.LoggingType.LogDestination : Swift.Hashable {}
extension AiactivUniversalSDK.LogFilterKind : Swift.Equatable {}
extension AiactivUniversalSDK.LogFilterKind : Swift.Hashable {}
extension AiactivUniversalSDK.LogFilterKind : Swift.RawRepresentable {}
extension AiactivUniversalSDK.MetricType : Swift.Equatable {}
extension AiactivUniversalSDK.MetricType : Swift.Hashable {}
extension AiactivUniversalSDK.MetricType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.ApiFramework : Swift.Equatable {}
extension AiactivUniversalSDK.ApiFramework : Swift.Hashable {}
extension AiactivUniversalSDK.ApiFramework : Swift.RawRepresentable {}
extension AiactivUniversalSDK.DeviceToken : AiactivUniversalSDK.Plugin {}
extension AiactivUniversalSDK.VideoProtocol : Swift.Equatable {}
extension AiactivUniversalSDK.VideoProtocol : Swift.Hashable {}
extension AiactivUniversalSDK.VideoProtocol : Swift.RawRepresentable {}
extension AiactivUniversalSDK.AdType : Swift.Equatable {}
extension AiactivUniversalSDK.AdType : Swift.Hashable {}
extension AiactivUniversalSDK.AdType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.Geo.GeoType : Swift.Equatable {}
extension AiactivUniversalSDK.Geo.GeoType : Swift.Hashable {}
extension AiactivUniversalSDK.Geo.GeoType : Swift.RawRepresentable {}
extension AiactivUniversalSDK.Geo.IPLocationService : Swift.Equatable {}
extension AiactivUniversalSDK.Geo.IPLocationService : Swift.Hashable {}
extension AiactivUniversalSDK.Geo.IPLocationService : Swift.RawRepresentable {}
extension AiactivUniversalSDK.DeliveryMethod : Swift.Equatable {}
extension AiactivUniversalSDK.DeliveryMethod : Swift.Hashable {}
extension AiactivUniversalSDK.DeliveryMethod : Swift.RawRepresentable {}
extension AiactivUniversalSDK.CreativeAttribute : Swift.Equatable {}
extension AiactivUniversalSDK.CreativeAttribute : Swift.Hashable {}
extension AiactivUniversalSDK.CreativeAttribute : Swift.RawRepresentable {}
extension AiactivUniversalSDK.User.Gender : Swift.Equatable {}
extension AiactivUniversalSDK.User.Gender : Swift.Hashable {}
extension AiactivUniversalSDK.User.Gender : Swift.RawRepresentable {}
extension AiactivUniversalSDK.PlaybackMethod : Swift.Equatable {}
extension AiactivUniversalSDK.PlaybackMethod : Swift.Hashable {}
extension AiactivUniversalSDK.PlaybackMethod : Swift.RawRepresentable {}
extension AiactivUniversalSDK.VideoStartDelay : Swift.Equatable {}
extension AiactivUniversalSDK.VideoStartDelay : Swift.Hashable {}
extension AiactivUniversalSDK.VideoStartDelay : Swift.RawRepresentable {}
extension AiactivUniversalSDK.VideoCompanion : Swift.Equatable {}
extension AiactivUniversalSDK.VideoCompanion : Swift.Hashable {}
extension AiactivUniversalSDK.VideoCompanion : Swift.RawRepresentable {}
